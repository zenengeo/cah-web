plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '6.1.0'
    // https://github.com/node-gradle/gradle-node-plugin
    id "com.github.node-gradle.node" version "3.2.1"
}

version = '0.0.1-SNAPSHOT'
gitVersioning.apply {
    refs {
        tag('.+') {
            version = '${ref}'
        }
        branch('main') {
            version = '${describe.tag}-SNAPSHOT'
        }
        branch('.+') {
            version = '${ref}-SNAPSHOT'
        }
    }

    // optional fallback configuration in case of no matching ref configuration
    rev {
        version = '${commit}'
    }

}

group = 'me.itzg'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// https://skaffold.dev/docs/pipeline-stages/builders/custom/
test.onlyIf { !System.getenv('SKIP_TESTS') }

repositories {
    mavenCentral()
}

ext {
    uiSrcDir = "${projectDir}/src/main/ui"
    uiDestBuildDir = "${buildDir}/ui"
}

node {
    download = findProperty('downloadNode') as boolean
    version = '16.15.0'
    nodeProjectDir = file(uiSrcDir)
}

task reactTest(type: NpmTask) {
    dependsOn 'npmInstall'
    args = ['run', 'test']
}

task reactBuild(type: NpmTask) {
    dependsOn 'npmInstall'
    inputs.files("${uiSrcDir}/package.json", "${uiSrcDir}/package-lock.json")
    inputs.dir("${uiSrcDir}/src")
    inputs.dir("${uiSrcDir}/public")
    outputs.dir("${uiDestBuildDir}/static")

    args = ['run', 'build']

    execOverrides {
        environment('BUILD_PATH', file("${uiDestBuildDir}/static"))
    }
}

tasks.named('bootJar') {
    dependsOn reactBuild
    classpath(file(uiDestBuildDir))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
    def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "zenengeo/${project.name}"

    // IMAGE and PUSH_IMAGE enable skaffold build support
    // https://skaffold.dev/docs/pipeline-stages/builders/custom/
    def imageOverride = System.getenv('IMAGE')
    if (imageOverride) {
        imageName = imageOverride
    } else {
        imageName = "${containerRegistry}/${containerImageName}:${project.version}"
        tags = ["${containerRegistry}/${containerImageName}:latest"]
    }
    if (System.getenv('PUSH_IMAGE') == 'true') {
        publish = true
    }
    docker {
        publishRegistry {
            username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
            password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
        }
    }
}

