buildscript {
    dependencies {
        classpath('com.google.cloud.tools:jib-spring-boot-extension-gradle:0.1.0')
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '6.1.2'
    // https://github.com/node-gradle/gradle-node-plugin
    id "com.github.node-gradle.node" version "3.3.0"
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

version = '0.0.1-SNAPSHOT'
gitVersioning.apply {
    refs {
        tag('.+') {
            version = '${ref}'
        }
        branch('main') {
            version = '${describe.tag}-SNAPSHOT'
        }
        branch('.+') {
            version = '${ref}-SNAPSHOT'
        }
    }

    // optional fallback configuration in case of no matching ref configuration
    rev {
        version = '${commit}'
    }

}

group = 'me.itzg'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    uiSrcDir = "${projectDir}/src/main/ui"
    uiDestBuildDir = "${buildDir}/ui"
}

node {
    download = findProperty('downloadNode') as boolean
    version = '16.15.0'
    nodeProjectDir = file(uiSrcDir)
}

task reactTest(type: NpmTask) {
    dependsOn 'npmInstall'
    args = ['run', 'test']
}

task reactBuild(type: NpmTask) {
    dependsOn 'npmInstall'
    inputs.files("${uiSrcDir}/package.json", "${uiSrcDir}/package-lock.json")
    inputs.dir("${uiSrcDir}/src")
    inputs.dir("${uiSrcDir}/public")
    outputs.dir(uiDestBuildDir)

    args = ['run', 'build']

    execOverrides {
        environment('BUILD_PATH', file("${uiDestBuildDir}/static"))
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jib') {
    dependsOn reactBuild
}
tasks.named('jibDockerBuild') {
    dependsOn reactBuild
}

jib {
    pluginExtensions {
        // https://github.com/GoogleContainerTools/jib-extensions/blob/master/first-party/jib-spring-boot-extension-gradle/README.md
        pluginExtension {
            implementation = 'com.google.cloud.tools.jib.gradle.extension.springboot.JibSpringBootExtension'
        }
    }

    from {
        image = 'eclipse-temurin:17'
    }
    to {
        image = project.name
        tags = [project.version]
    }

    extraDirectories {
        paths {
            path {
                from = uiDestBuildDir
                into = '/app/resources'
            }
        }
    }
}